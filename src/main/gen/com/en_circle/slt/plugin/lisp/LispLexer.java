/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.en_circle.slt.plugin.lisp;

import com.en_circle.slt.plugin.lisp.number.LispNumberLexerAdapter;
import com.en_circle.slt.plugin.lisp.psi.LispTypes;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Lisp.flex</tt>
 */
class LispLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int UNQUOTE_STATE = 2;
  public static final int LINE_COMMENT = 4;
  public static final int STRING = 6;
  public static final int STRING_ESCAPE = 8;
  public static final int SHARPSIGN = 10;
  public static final int BIT_ARRAY = 12;
  public static final int CHARACTER = 14;
  public static final int BLOCK_COMMENT = 16;
  public static final int BLOCK_COMMENT_TEST = 18;
  public static final int BINARY_NUM = 20;
  public static final int OCTAL_NUM = 22;
  public static final int RADIX_NUM = 24;
  public static final int HEX_NUM = 26;
  public static final int STEP8 = 28;
  public static final int STEP8ESCAPE = 30;
  public static final int STEP9 = 32;
  public static final int STEP9ESCAPE = 34;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\15\1\0\1\1\1\15\22\0\1\1\1\20\1\10\1\12\3\20\1\6\1\4\1\5\1\21"+
    "\1\24\1\3\1\25\1\26\1\27\2\41\6\42\2\17\1\22\1\7\1\2\1\23\2\20\1\14\1\30\1"+
    "\31\1\32\3\43\10\33\1\34\1\35\1\33\1\36\1\37\4\33\1\40\2\33\1\20\1\16\3\20"+
    "\1\11\1\30\1\31\1\32\3\43\10\33\1\34\1\35\1\33\1\36\1\37\4\33\1\40\2\33\1"+
    "\20\1\13\2\20\201\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\22\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66";

  private static int [] zzUnpackAction() {
    int [] result = new int[72];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\44\0\110\0\154\0\220\0\264\0\330\0\374"+
    "\0\u0120\0\u0144\0\u0168\0\u018c\0\u01b0\0\u01d4\0\u01f8\0\u021c"+
    "\0\u0240\0\u0264\0\u0288\0\u02ac\0\u0288\0\u0288\0\u0288\0\u0288"+
    "\0\u0288\0\u0288\0\u0288\0\u0288\0\u0288\0\u0288\0\u0288\0\u0288"+
    "\0\u0288\0\u0288\0\u0288\0\u0288\0\u0288\0\u0288\0\u0288\0\u0288"+
    "\0\u0288\0\u0288\0\u0288\0\u0288\0\u0288\0\u0288\0\u0288\0\u0288"+
    "\0\u0288\0\u0288\0\u0288\0\u0288\0\u0288\0\u0288\0\u0288\0\u0288"+
    "\0\u0288\0\u0288\0\u0288\0\u0288\0\u0288\0\u0288\0\u0288\0\u0288"+
    "\0\u0288\0\u0288\0\u0288\0\u0288\0\u0288\0\u0288\0\u0288\0\u0288";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[72];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\25\1\24\1\23\25\25"+
    "\14\37\1\40\27\37\15\41\1\42\36\41\1\43\5\41"+
    "\1\44\25\41\44\33\3\23\1\45\1\46\1\23\1\47"+
    "\3\45\1\50\1\51\1\45\1\23\1\52\1\41\1\45"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\45\1\61"+
    "\1\62\1\63\1\45\1\64\1\65\1\66\1\67\1\70"+
    "\2\41\1\45\13\71\1\41\25\71\1\41\2\71\44\72"+
    "\13\41\1\73\30\41\12\51\1\74\31\51\27\75\1\41"+
    "\11\75\1\41\2\75\27\76\1\41\11\76\2\41\1\76"+
    "\17\77\1\41\7\77\15\41\17\100\1\41\7\100\4\41"+
    "\6\100\3\41\1\0\1\101\1\102\7\101\1\102\1\103"+
    "\1\102\1\101\1\104\25\102\44\105\1\0\12\102\1\106"+
    "\2\102\1\107\25\102\44\110\45\0\1\24\13\0\1\24"+
    "\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[720];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\22\0\1\11\1\1\64\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[72];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

LispNumberLexerAdapter numberLexer = new LispNumberLexerAdapter();
int escapeCount = 0;
StringBuffer tokenBuffer = new StringBuffer();

IElementType processBuffer(boolean unget) {
      if (unget)
          yypushback(1);
      return LispLexerUtils.processToken(numberLexer, tokenBuffer.toString());
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LispLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        switch (zzLexicalState) {
            case YYINITIAL: {
              return null;
            }  // fall though
            case 73: break;
            case UNQUOTE_STATE: {
              yybegin(YYINITIAL); return LispTypes.UNQUOTE;
            }  // fall though
            case 74: break;
            case LINE_COMMENT: {
              yybegin(YYINITIAL); return LispTypes.LINE_COMMENT;
            }  // fall though
            case 75: break;
            case STRING: {
              yybegin(YYINITIAL); return TokenType.ERROR_ELEMENT;
            }  // fall though
            case 76: break;
            case STRING_ESCAPE: {
              yybegin(YYINITIAL); return TokenType.ERROR_ELEMENT;
            }  // fall though
            case 77: break;
            case SHARPSIGN: {
              yybegin(YYINITIAL); return TokenType.ERROR_ELEMENT;
            }  // fall though
            case 78: break;
            case BIT_ARRAY: {
              yybegin(YYINITIAL); yypushback(1); return LispTypes.BIT_ARRAY;
            }  // fall though
            case 79: break;
            case CHARACTER: {
              yybegin(YYINITIAL); return TokenType.ERROR_ELEMENT;
            }  // fall though
            case 80: break;
            case BLOCK_COMMENT: {
              yybegin(YYINITIAL); return TokenType.ERROR_ELEMENT;
            }  // fall though
            case 81: break;
            case BLOCK_COMMENT_TEST: {
              yybegin(YYINITIAL); return TokenType.ERROR_ELEMENT;
            }  // fall though
            case 82: break;
            case BINARY_NUM: {
              yybegin(YYINITIAL); return TokenType.ERROR_ELEMENT;
            }  // fall though
            case 83: break;
            case OCTAL_NUM: {
              yybegin(YYINITIAL); return TokenType.ERROR_ELEMENT;
            }  // fall though
            case 84: break;
            case RADIX_NUM: {
              yybegin(YYINITIAL); return TokenType.ERROR_ELEMENT;
            }  // fall though
            case 85: break;
            case HEX_NUM: {
              yybegin(YYINITIAL); return TokenType.ERROR_ELEMENT;
            }  // fall though
            case 86: break;
            case STEP8: {
              yybegin(YYINITIAL); return processBuffer(false);
            }  // fall though
            case 87: break;
            case STEP8ESCAPE: {
              yybegin(YYINITIAL); return TokenType.ERROR_ELEMENT;
            }  // fall though
            case 88: break;
            case STEP9: {
              yybegin(YYINITIAL); return TokenType.ERROR_ELEMENT;
            }  // fall though
            case 89: break;
            case STEP9ESCAPE: {
              yybegin(YYINITIAL); return TokenType.ERROR_ELEMENT;
            }  // fall though
            case 90: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(YYINITIAL); return TokenType.ERROR_ELEMENT;
            } 
            // fall through
          case 55: break;
          case 2: 
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 56: break;
          case 3: 
            { yybegin(STEP8); escapeCount=0; tokenBuffer.setLength(0); tokenBuffer.append(yytext());
            } 
            // fall through
          case 57: break;
          case 4: 
            { yybegin(UNQUOTE_STATE);
            } 
            // fall through
          case 58: break;
          case 5: 
            { yybegin(YYINITIAL); return LispTypes.LPAREN;
            } 
            // fall through
          case 59: break;
          case 6: 
            { yybegin(YYINITIAL); return LispTypes.RPAREN;
            } 
            // fall through
          case 60: break;
          case 7: 
            { yybegin(YYINITIAL); return LispTypes.QUOTE;
            } 
            // fall through
          case 61: break;
          case 8: 
            { yybegin(LINE_COMMENT);
            } 
            // fall through
          case 62: break;
          case 9: 
            { yybegin(STRING);
            } 
            // fall through
          case 63: break;
          case 10: 
            { yybegin(YYINITIAL); return LispTypes.BACKQUOTE;
            } 
            // fall through
          case 64: break;
          case 11: 
            { yybegin(SHARPSIGN);
            } 
            // fall through
          case 65: break;
          case 12: 
            { yybegin(STEP9); escapeCount=1; tokenBuffer.setLength(0);
            } 
            // fall through
          case 66: break;
          case 13: 
            { yybegin(YYINITIAL); yypushback(1); return LispTypes.UNQUOTE;
            } 
            // fall through
          case 67: break;
          case 14: 
            { yybegin(YYINITIAL); return LispTypes.UNQUOTE_SPLICE;
            } 
            // fall through
          case 68: break;
          case 15: 
            { 
            } 
            // fall through
          case 69: break;
          case 16: 
            { yybegin(YYINITIAL); return LispTypes.LINE_COMMENT;
            } 
            // fall through
          case 70: break;
          case 17: 
            { yybegin(YYINITIAL); return LispTypes.STRING_TOKEN;
            } 
            // fall through
          case 71: break;
          case 18: 
            { yybegin(STRING_ESCAPE);
            } 
            // fall through
          case 72: break;
          case 19: 
            { yybegin(YYINITIAL); return LispTypes.UNDEFINED_SEQUENCE;
            } 
            // fall through
          case 73: break;
          case 20: 
            { yybegin(YYINITIAL); return LispTypes.HASH_LPAREN;
            } 
            // fall through
          case 74: break;
          case 21: 
            { yybegin(YYINITIAL); return LispTypes.FUNCTION;
            } 
            // fall through
          case 75: break;
          case 22: 
            { yybegin(YYINITIAL); return LispTypes.REFERENCE_LABEL;
            } 
            // fall through
          case 76: break;
          case 23: 
            { yybegin(BLOCK_COMMENT);
            } 
            // fall through
          case 77: break;
          case 24: 
            { yybegin(CHARACTER);
            } 
            // fall through
          case 78: break;
          case 25: 
            { yybegin(BIT_ARRAY);
            } 
            // fall through
          case 79: break;
          case 26: 
            { yybegin(YYINITIAL); return LispTypes.UNINTERN;
            } 
            // fall through
          case 80: break;
          case 27: 
            { yybegin(YYINITIAL); return LispTypes.REFERENCE_SET;
            } 
            // fall through
          case 81: break;
          case 28: 
            { yybegin(YYINITIAL); return LispTypes.TEST_SUCCESS;
            } 
            // fall through
          case 82: break;
          case 29: 
            { yybegin(YYINITIAL); return LispTypes.TEST_FALURE;
            } 
            // fall through
          case 83: break;
          case 30: 
            { yybegin(YYINITIAL); return LispTypes.EVAL_VALUE;
            } 
            // fall through
          case 84: break;
          case 31: 
            { yybegin(YYINITIAL); return LispTypes.ARRAY_START;
            } 
            // fall through
          case 85: break;
          case 32: 
            { yybegin(BINARY_NUM);
            } 
            // fall through
          case 86: break;
          case 33: 
            { yybegin(YYINITIAL); return LispTypes.REAL_PAIR_START;
            } 
            // fall through
          case 87: break;
          case 34: 
            { yybegin(OCTAL_NUM);
            } 
            // fall through
          case 88: break;
          case 35: 
            { yybegin(YYINITIAL); return LispTypes.PATHNAME_INDICATOR;
            } 
            // fall through
          case 89: break;
          case 36: 
            { yybegin(RADIX_NUM);
            } 
            // fall through
          case 90: break;
          case 37: 
            { yybegin(YYINITIAL); return LispTypes.STRUCTURE_TOKEN;
            } 
            // fall through
          case 91: break;
          case 38: 
            { yybegin(HEX_NUM);
            } 
            // fall through
          case 92: break;
          case 39: 
            { yybegin(YYINITIAL); yypushback(1); return LispTypes.BIT_ARRAY;
            } 
            // fall through
          case 93: break;
          case 40: 
            { yybegin(YYINITIAL); return LispTypes.CHARACTER;
            } 
            // fall through
          case 94: break;
          case 41: 
            { yybegin(BLOCK_COMMENT_TEST);
            } 
            // fall through
          case 95: break;
          case 42: 
            { yybegin(YYINITIAL); return LispTypes.BLOCK_COMMENT;
            } 
            // fall through
          case 96: break;
          case 43: 
            { yybegin(YYINITIAL); yypushback(1); return LispTypes.BINARY_NUMBER_TOKEN;
            } 
            // fall through
          case 97: break;
          case 44: 
            { yybegin(YYINITIAL); yypushback(1); return LispTypes.OCTAL_NUMBER_TOKEN;
            } 
            // fall through
          case 98: break;
          case 45: 
            { yybegin(YYINITIAL); yypushback(1); return LispTypes.RADIX_NUMBER_TOKEN;
            } 
            // fall through
          case 99: break;
          case 46: 
            { yybegin(YYINITIAL); yypushback(1); return LispTypes.HEX_NUMBER_TOKEN;
            } 
            // fall through
          case 100: break;
          case 47: 
            { yybegin(YYINITIAL); return processBuffer(true);
            } 
            // fall through
          case 101: break;
          case 48: 
            { tokenBuffer.append(yytext());
            } 
            // fall through
          case 102: break;
          case 49: 
            { tokenBuffer.append(yytext()); yybegin(STEP9); escapeCount++;
            } 
            // fall through
          case 103: break;
          case 50: 
            { yybegin(STEP8ESCAPE);
            } 
            // fall through
          case 104: break;
          case 51: 
            { yybegin(STEP8); tokenBuffer.append(yytext());
            } 
            // fall through
          case 105: break;
          case 52: 
            { tokenBuffer.append(yytext()); yybegin(STEP8); escapeCount++;
            } 
            // fall through
          case 106: break;
          case 53: 
            { yybegin(STEP9ESCAPE);
            } 
            // fall through
          case 107: break;
          case 54: 
            { yybegin(STEP9); tokenBuffer.append(yytext());
            } 
            // fall through
          case 108: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
